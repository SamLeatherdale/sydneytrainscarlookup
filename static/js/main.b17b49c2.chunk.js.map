{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["tfnswData","require","idRegex","SearchResult","queryLetter","queryNumber","fuzzy","extraInfo","similarRanges","AppState","carId","showError","searchResult","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data","state","onChangeCarId","bind","assertThisInitialized","onFormSubmit","onFormReset","onClickSuggestion","e","value","target","replace","toUpperCase","setState","performSearch","preventDefault","dataset","carid","id","partialState","searchId","match","result","parseInt","carLetterData","ranges","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","range","checkIdInRange","exact","err","return","getFuzzyByNumber","concat","getFuzzyByLetter","length","car","cars","set","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","extra","extras","info","indexOf","substring","number","_arr","keys","_i","key","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","letter","sets","letters","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","shuffle","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","results","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","slice","_this2","isRandomSuggestion","suggestionButtons","generateSuggestions","react_default","a","createElement","App_Form","onChangeInput","onSubmit","onReset","className","role","map","min","max","carID","start","end","Math","ceil","floor","random","type","onClick","data-carid","carnames","title","join","src","img","data-cols","href","wiki","tfnsw","Component","Form","onChange","required","array","temporaryValue","randomIndex","currentIndex","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b17b49c2.chunk.js","sourcesContent":["import React, { Component, FormEvent, FormEventHandler, ChangeEventHandler, ChangeEvent } from 'react';\r\nconst tfnswData: TfNSWData = require('./data/data.json');\r\n\r\nconst WIKIPEDIA_URL = \"//en.wikipedia.org/wiki/\";\r\nconst TFNSW_ARTICLE_URL = \"//transportnsw.info/travel-info/ways-to-get-around/train/fleet-facilities/\";\r\n//const TFNSW_IMAGE_URL = \"//transportnsw.info/sites/default/files/styles/wysiwyg_large_1140/public/image/2018/04/\";\r\nconst TFNSW_IMAGE_URL = \"images/\";\r\nconst idRegex = /^([A-Z]{0,3})?([0-9]{4})?$/;\r\n\r\nclass SearchResult {\r\n    public queryLetter: string = \"\";\r\n    public queryNumber: number = 0;\r\n    public exact!: Range;\r\n    public fuzzy: Range[] = [];\r\n    public car!: Car;\r\n    public extraInfo: string = \"\";\r\n    public similarRanges: Range[] = [];\r\n}\r\n\r\ninterface Range extends Object {\r\n    start: number;\r\n    end: number;\r\n    letter: string;\r\n    set: string;\r\n    extra: string;\r\n}\r\n\r\ninterface TfNSWData {\r\n    ranges: RangeMap;\r\n    sets: SetMap;\r\n    cars: CarMap;\r\n    carnames: CarNameMap;\r\n    extras: ExtrasMap;\r\n}\r\n\r\ninterface RangeMap {\r\n    [propName: string]: Range[];\r\n}\r\n\r\ninterface SetMap {\r\n    [propName: string]: TrainSet;\r\n}\r\n\r\ninterface TrainSet {\r\n    tfnsw: string;\r\n    name: string;\r\n    wiki: string;\r\n}\r\n\r\ninterface CarNameMap {\r\n    [propName: string]: CarName;\r\n}\r\n\r\ninterface CarName {\r\n    title: string;\r\n}\r\n\r\ninterface CarMap {\r\n    [propName: string]: Car;\r\n}\r\n\r\ninterface Car {\r\n    href: string;\r\n    img: string;\r\n}\r\n\r\ninterface ExtrasMap {\r\n    [propName: string]: Extra;\r\n}\r\n\r\ninterface Extra {\r\n    info: string;\r\n}\r\n\r\n\r\nclass AppState {\r\n    public carId = \"\";\r\n    public showError = false;\r\n    public searchResult = new SearchResult();\r\n}\r\n\r\nexport default class App extends Component<{}, AppState> {\r\n    private data: TfNSWData;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = tfnswData;\r\n        this.state = new AppState();\r\n\r\n        //Bind event handers so `this` refers to this class, not element that event fired on\r\n        this.onChangeCarId = this.onChangeCarId.bind(this);\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onFormReset = this.onFormReset.bind(this);\r\n        this.onClickSuggestion = this.onClickSuggestion.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n    }\r\n\r\n    onChangeCarId(e: ChangeEvent) {\r\n        let target = e.target as HTMLInputElement;\r\n        let value = target.value.replace(/[^A-Z\\d]/i, '').toUpperCase();\r\n        this.setState({\r\n            carId: value\r\n        });\r\n        this.performSearch(value);\r\n    }\r\n\r\n    onFormSubmit(e: FormEvent) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onFormReset(e: FormEvent) {\r\n        this.setState({\r\n            carId: \"\"\r\n        });\r\n        this.performSearch(\"\");\r\n    }\r\n\r\n    onClickSuggestion(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        let target = e.target as HTMLButtonElement;\r\n        let carId = target.dataset.carid;\r\n        this.setState({\r\n            carId: carId\r\n        });\r\n        this.performSearch(carId);\r\n    }\r\n\r\n    /**\r\n     * Uses the current value of this.state.carId to search for a given car\r\n     * and update the state with the results.\r\n     */\r\n    performSearch(id: string) {\r\n        const partialState: any = {};\r\n        let searchResult = this.searchId(id);\r\n\r\n        partialState.showError = !searchResult && id !== \"\";\r\n        if (!searchResult) {\r\n            //If the search failed, populate the result with an empty result\r\n            searchResult = new SearchResult();\r\n        }\r\n\r\n        partialState.searchResult = searchResult;\r\n\r\n        this.setState(partialState);\r\n    }\r\n\r\n    /**\r\n     * Searches for the given Car ID and returns exact and fuzzy matches.\r\n     * @param {string} id \r\n     * @returns {SearchResult} Returns search results, or null if an error occurred.\r\n     */\r\n    searchId(id: string) : SearchResult {\r\n        const match = id.match(idRegex);\r\n        const result = new SearchResult();\r\n\r\n        if (match === null) {\r\n            //showAlert(\"Oops! That ID doesn't follow a valid format (eg. D1023)\");\r\n            return null;\r\n        }\r\n\r\n        result.queryLetter = match[1];\r\n        result.queryNumber = parseInt(match[2]);\r\n        const carLetterData = this.data.ranges[result.queryLetter];\r\n\r\n        // if (typeof carLetterData === \"undefined\") {\r\n        //     showAlert(\"Sorry! We couldn't find a Sydney Trains car for that ID\");\r\n        //     return false;\r\n        // }\r\n        if (typeof carLetterData !== \"undefined\") {\r\n            //Just look through this letter\r\n            for (let range of carLetterData) {\r\n                if (checkIdInRange(result.queryNumber, range)) {\r\n                    result.exact = range;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (!result.exact) {\r\n            let fuzzy : Range[] = [];\r\n            if (result.queryNumber) {\r\n                fuzzy = this.getFuzzyByNumber(result.queryNumber)\r\n            }\r\n            if (result.queryLetter) {\r\n                fuzzy = fuzzy.concat(this.getFuzzyByLetter(result.queryLetter));\r\n            }   \r\n            result.fuzzy = fuzzy;\r\n        }\r\n\r\n        if (!result.exact && result.fuzzy.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        //Populate rich info for exact match\r\n        if (result.exact) {\r\n            let range = result.exact;\r\n\r\n            //Populate with data\r\n            result.car = this.data.cars[range.set + \"/\" + result.queryLetter];\r\n\r\n            //Get all models of this set/type\r\n            for (let range of carLetterData) {\r\n                if (range.set == result.exact.set) {\r\n                    result.similarRanges.push(range);\r\n                }\r\n            }\r\n\r\n            //Populate extra info\r\n            if (range.extra !== '') {\r\n                let extra = this.data.extras[range.extra];\r\n                if (typeof extra !== \"undefined\") {\r\n                    result.extraInfo = extra.info;\r\n                } else if (range.extra.indexOf(\"VS\") === 0) {\r\n                    result.extraInfo = this.data.extras[\"VS\"].info.replace(\"$1\", range.extra.substring(2));\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Look through all letters to find cars matching the given number.\r\n     * @param number \r\n     */\r\n    getFuzzyByNumber(number: number) : Range[] {\r\n        const fuzzy : Range[] = [];\r\n\r\n        for (let key of Object.keys(this.data.ranges)) {\r\n            let carLetterData = this.data.ranges[key];\r\n            for (let range of carLetterData) {\r\n                if (checkIdInRange(number, range)) {\r\n                    fuzzy.push(range);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return fuzzy;\r\n    }\r\n\r\n    getFuzzyByLetter(letter: string) : Range[] {\r\n        const fuzzy : Range[] = [];\r\n        const sets = {};\r\n        const letters = {};\r\n\r\n        for (let key of shuffle(Object.keys(this.data.ranges))) {\r\n            if (key.indexOf(letter) !== -1) {\r\n                let carLetterData = this.data.ranges[key];\r\n                for (let range of carLetterData) {\r\n                    if (!sets[range.set] || !letters[key]) {\r\n                        fuzzy.push(range);\r\n                        sets[range.set] = true;\r\n                        letters[key] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return fuzzy;\r\n    }\r\n\r\n    /**\r\n     * Generates some random suggestions to prompt the user.\r\n     */\r\n    generateSuggestions() : Range[] {\r\n        const results : Range[] = [];\r\n        const sets = {};\r\n\r\n        for (let key of shuffle(Object.keys(this.data.ranges))) {\r\n            let carLetterData = this.data.ranges[key];\r\n            for (let range of carLetterData) {\r\n                //Make sure this set hasn't already been added\r\n                if (!sets[range.set]) {\r\n                    results.push(range);\r\n                    sets[range.set] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return results.slice(0, 12);\r\n    }\r\n\r\n    render() {\r\n        const exact = this.state.searchResult.exact;\r\n        const isRandomSuggestion = this.state.carId == \"\";\r\n        const suggestionButtons = (isRandomSuggestion) \r\n            ? this.generateSuggestions() : this.state.searchResult.fuzzy;\r\n\r\n        return ( \r\n        <div>\r\n            <Form value={this.state.carId} onChangeInput={this.onChangeCarId} onSubmit={this.onFormSubmit} onReset={this.onFormReset} />\r\n\r\n            {this.state.showError && \r\n            (<div className=\"alert alert-danger\" role=\"alert\">\r\n                Sorry, we couldn't find any cars with that ID.\r\n            </div>)}\r\n\r\n            {!isRandomSuggestion && !this.state.searchResult.exact && this.state.searchResult.fuzzy.length > 0 &&\r\n            (<div className=\"alert alert-warning\" role=\"alert\">\r\n                We couldn't find an exact match for that ID, here are some suggestions.\r\n            </div>)}\r\n\r\n            {isRandomSuggestion && \r\n            (<div className=\"alert alert-primary\" role=\"alert\">\r\n                Try some of these suggestions if you're not on a train right now.\r\n            </div>)}\r\n\r\n            <div id=\"suggestionBtnContainer\">\r\n            {suggestionButtons.map((range) => {\r\n                    let carID = range.letter + \r\n                        (!isRandomSuggestion && this.state.searchResult.queryNumber\r\n                            ? this.state.searchResult.queryNumber \r\n                            : getRandomInt(range.start, range.end + 1));\r\n                    return <button key={carID} type=\"button\" className=\"btn btn-info\" onClick={this.onClickSuggestion} data-carid={carID}>{carID}</button>\r\n                })}\r\n            </div>\r\n\r\n            {exact && (\r\n            <div id=\"results\">\r\n                <h3>\r\n                    <span id=\"carSet\">{exact.set} set</span>\r\n                    <span> - </span>\r\n                    <span id=\"carName\">{this.data.carnames[exact.letter].title}</span>\r\n                </h3>\r\n                <h4 id=\"carRanges\">{this.state.searchResult.similarRanges.map((range: Range) => {\r\n                    return range.letter + range.start + '-' + range.end;\r\n                }).join(\", \")}</h4>\r\n                <p id=\"carInfo\">{this.state.searchResult.extraInfo}</p>\r\n                <img id=\"carImg\" className=\"mb-2\" \r\n                    src={TFNSW_IMAGE_URL + this.state.searchResult.car.img} />\r\n\r\n                <div className=\"btn-container\" data-cols='2'>\r\n                    <a className=\"btn btn-info\" id=\"carWiki\" target=\"_blank\"\r\n                        href={WIKIPEDIA_URL + this.data.sets[exact.set].wiki}>View more on Wikipedia</a>\r\n                    <a className=\"btn btn-info\" id=\"carTfnsw\" target=\"_blank\"\r\n                        href={TFNSW_ARTICLE_URL + this.data.sets[exact.set].tfnsw + this.state.searchResult.car.href}>\r\n                        View more on Sydney Trains</a>\r\n                </div>\r\n            </div>\r\n            )}\r\n        </div>);\r\n    }\r\n}\r\n\r\nclass Form extends Component<{\r\n    value: any, \r\n    onSubmit: FormEventHandler, \r\n    onReset: FormEventHandler,\r\n    onChangeInput: ChangeEventHandler\r\n}, {}> {\r\n    render() {\r\n        return (\r\n        <form className=\"mb-4\" onSubmit={this.props.onSubmit} onReset={this.props.onReset}>\r\n            <div className=\"input-group mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\">Car Number: </span>\r\n                </div>\r\n                <input className=\"form-control\" id=\"carId\" type=\"text\" \r\n                    value={this.props.value} onChange={this.props.onChangeInput} required />\r\n                {this.props.value !== \"\" && \r\n                (<div className=\"input-group-append\">\r\n                    <input className=\"btn btn-danger\" type=\"reset\" value=\"Clear\" />\r\n                </div>)}\r\n            </div>\r\n        </form>);\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether a given car number is within the given range.\r\n */\r\nfunction checkIdInRange(id: number, range: Range) : boolean {\r\n    return (id >= range.start && id <= range.end);\r\n}\r\n\r\n/**\r\n * Gets a random integer between two given integers.\r\n * @param min Inclusive minimum.\r\n * @param max Exclusive maximum.\r\n */\r\nfunction getRandomInt(min: number, max: number) : number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;   \r\n}\r\n\r\n/**\r\n * Shuffle an array using the Fisher-Yates algorithm.\r\n * From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n * @param array\r\n */\r\nfunction shuffle(array: any[]) : any[] {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n    \r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n}\r\n\r\n/**\r\n * Get a URL parameter by name.\r\n * From https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\r\n */\r\nfunction getParameterByName(name: string, url: string) : string {\r\n    if (!url) url = window.location.href;\r\n    name = name.replace(/[[\\]]/g, \"\\\\$&\");\r\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\r\n        results = regex.exec(url);\r\n    if (!results) return null;\r\n    if (!results[2]) return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.tsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './css/main.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}