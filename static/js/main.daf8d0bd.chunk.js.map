{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["tfnswData","require","idRegex","SearchResult","queryLetter","queryNumber","fuzzy","extraInfo","similarRanges","AppState","carId","showError","searchResult","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data","state","onChangeCarId","bind","assertThisInitialized","onFormSubmit","onClickSuggestion","e","target","setState","value","preventDefault","performSearch","dataset","carid","id","partialState","searchId","console","log","match","result","parseInt","carLetterData","ranges","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","range","checkIdInRange","exact","err","return","_arr","keys","_i","length","key","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","car","cars","set","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","extra","extras","info","indexOf","replace","substring","_this2","errorStyle","display","noExactWarningStyle","react_default","a","createElement","App_Form","onChangeInput","onSubmit","className","role","style","map","carID","letter","type","onClick","data-carid","carnames","title","start","end","join","src","img","href","sets","wiki","tfnsw","Component","Form","htmlFor","onChange","required","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.daf8d0bd.chunk.js","sourcesContent":["import React, { Component, FormEvent, FormEventHandler, ChangeEventHandler, ChangeEvent } from 'react';\r\nconst tfnswData: TfNSWData = require('./data/data.json');\r\n\r\nconst WIKIPEDIA_URL = \"//en.wikipedia.org/wiki/\";\r\nconst TFNSW_ARTICLE_URL = \"//transportnsw.info/travel-info/ways-to-get-around/train/fleet-facilities/\";\r\nconst TFNSW_IMAGE_URL = \"//transportnsw.info/sites/default/files/styles/wysiwyg_large_1140/public/image/2018/04/\";\r\nconst idRegex = /^([A-Z]{0,3})?([0-9]{4})$/;\r\n\r\nclass SearchResult {\r\n    public queryLetter: string = \"\";\r\n    public queryNumber: number = 0;\r\n    public exact!: Range;\r\n    public fuzzy: Range[] = [];\r\n    public car!: Car;\r\n    public extraInfo: string = \"\";\r\n    public similarRanges: Range[] = [];\r\n}\r\n\r\ninterface Range extends Object {\r\n    start: number;\r\n    end: number;\r\n    letter: string;\r\n    set: string;\r\n    extra: string;\r\n}\r\n\r\ninterface TfNSWData {\r\n    ranges: RangeMap;\r\n    sets: SetMap;\r\n    cars: CarMap;\r\n    carnames: CarNameMap;\r\n    extras: ExtrasMap;\r\n}\r\n\r\ninterface RangeMap {\r\n    [propName: string]: Range[];\r\n}\r\n\r\ninterface SetMap {\r\n    [propName: string]: TrainSet;\r\n}\r\n\r\ninterface TrainSet {\r\n    tfnsw: string;\r\n    name: string;\r\n    wiki: string;\r\n}\r\n\r\ninterface CarNameMap {\r\n    [propName: string]: CarName;\r\n}\r\n\r\ninterface CarName {\r\n    title: string;\r\n}\r\n\r\ninterface CarMap {\r\n    [propName: string]: Car;\r\n}\r\n\r\ninterface Car {\r\n    href: string;\r\n    img: string;\r\n}\r\n\r\ninterface ExtrasMap {\r\n    [propName: string]: Extra;\r\n}\r\n\r\ninterface Extra {\r\n    info: string;\r\n}\r\n\r\n\r\nclass AppState {\r\n    public carId = \"\";\r\n    public showError = false;\r\n    public searchResult = new SearchResult();\r\n}\r\n\r\nexport default class App extends Component<{}, AppState> {\r\n    private data: TfNSWData;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = tfnswData;\r\n        this.state = new AppState();\r\n\r\n        //Bind event handers so `this` refers to this class, not element that event fired on\r\n        this.onChangeCarId = this.onChangeCarId.bind(this);\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onClickSuggestion = this.onClickSuggestion.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n    }\r\n\r\n    onChangeCarId(e: ChangeEvent) {\r\n        let target = e.target as HTMLInputElement;\r\n        this.setState({\r\n            carId: target.value\r\n        });\r\n    }\r\n\r\n    onFormSubmit(e: FormEvent) {\r\n        e.preventDefault();\r\n        this.performSearch(this.state.carId);\r\n    }\r\n\r\n    onClickSuggestion(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        let target = e.target as HTMLButtonElement;\r\n        let carId = target.dataset.carid;\r\n        this.setState({\r\n            carId: carId\r\n        });\r\n        this.performSearch(carId);\r\n    }\r\n\r\n    /**\r\n     * Uses the current value of this.state.carId to search for a given car\r\n     * and update the state with the results.\r\n     */\r\n    performSearch(id: string) {\r\n        const partialState: any = {};\r\n        const searchResult = this.searchId(id);\r\n        console.log(searchResult);\r\n\r\n        partialState.showError = !searchResult;\r\n        partialState.searchResult = searchResult;\r\n\r\n        this.setState(partialState);\r\n    }\r\n\r\n    /**\r\n     * Searches for the given Car ID and returns exact and fuzzy matches.\r\n     * @param {string} id \r\n     * @returns {SearchResult} Returns search results, or null if an error occurred.\r\n     */\r\n    searchId(id: string) {\r\n        const match = id.match(idRegex);\r\n        const result = new SearchResult();\r\n\r\n        if (match === null) {\r\n            //showAlert(\"Oops! That ID doesn't follow a valid format (eg. D1023)\");\r\n            return false;\r\n        }\r\n\r\n        result.queryLetter = match[1];\r\n        result.queryNumber = parseInt(match[2]);\r\n        const carLetterData = this.data.ranges[result.queryLetter];\r\n\r\n        // if (typeof carLetterData === \"undefined\") {\r\n        //     showAlert(\"Sorry! We couldn't find a Sydney Trains car for that ID\");\r\n        //     return false;\r\n        // }\r\n        if (typeof carLetterData !== \"undefined\") {\r\n            //Just look through this letter\r\n            for (let range of carLetterData) {\r\n                if (checkIdInRange(result.queryNumber, range)) {\r\n                    result.exact = range;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            //Look through all letters\r\n            for (let key of Object.keys(this.data.ranges)) {\r\n                let carLetterData = this.data.ranges[key];\r\n                for (let range of carLetterData) {\r\n                    if (checkIdInRange(result.queryNumber, range)) {\r\n                        result.fuzzy.push(range);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!result.exact && result.fuzzy.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        //Populate rich info for exact match\r\n        if (result.exact) {\r\n            let range = result.exact;\r\n\r\n            //Populate with data\r\n            result.car = this.data.cars[range.set + \"/\" + result.queryLetter];\r\n\r\n            //Get all models of this set/type\r\n            for (let range of carLetterData) {\r\n                if (range.set == result.exact.set) {\r\n                    result.similarRanges.push(range);\r\n                }\r\n            }\r\n\r\n            //Populate extra info\r\n            if (range.extra !== '') {\r\n                let extra = this.data.extras[range.extra];\r\n                if (typeof extra !== \"undefined\") {\r\n                    result.extraInfo = extra.info;\r\n                } else if (range.extra.indexOf(\"VS\") === 0) {\r\n                    result.extraInfo = this.data.extras[\"VS\"].info.replace(\"$1\", range.extra.substring(2));\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        const exact = this.state.searchResult.exact;\r\n        const errorStyle = this.state.showError ? {} : {display: \"none\"};\r\n        const noExactWarningStyle = !this.state.searchResult.exact && this.state.searchResult.fuzzy.length > 0 ? {} : {display: \"none\"};\r\n\r\n        return ( \r\n        <div>\r\n            <Form value={this.state.carId} onChangeInput={this.onChangeCarId} onSubmit={this.onFormSubmit} />\r\n            <div className=\"alert alert-danger\" role=\"alert\" style={errorStyle}>\r\n                Sorry, we couldn't find any cars with that ID.\r\n            </div>\r\n            <div className=\"alert alert-warning\" role=\"alert\" style={noExactWarningStyle}>\r\n                We couldn't find an exact match for that ID, here are some suggestions.\r\n            </div>\r\n\r\n            <div className=\"btn-container\">\r\n            {this.state.searchResult \r\n                && this.state.searchResult.fuzzy.map((range) => {\r\n                    let carID = range.letter + this.state.searchResult.queryNumber;\r\n                    return <button key={range.letter} type=\"button\" className=\"btn btn-info\" onClick={this.onClickSuggestion} data-carid={carID}>{carID}</button>\r\n                })}\r\n            </div>\r\n\r\n            {exact && (\r\n            <div id=\"results\">\r\n                <h3>\r\n                    <span id=\"carSet\">{exact.set} set</span>\r\n                    <span> - </span>\r\n                    <span id=\"carName\">{this.data.carnames[exact.letter].title}</span>\r\n                </h3>\r\n                <h4 id=\"carRanges\">{this.state.searchResult.similarRanges.map((range: Range) => {\r\n                    return range.letter + range.start + '-' + range.end;\r\n                }).join(\", \")}</h4>\r\n                <p id=\"carInfo\">{this.state.searchResult.extraInfo}</p>\r\n                <img id=\"carImg\" className=\"mb-2\" \r\n                    src={TFNSW_IMAGE_URL + this.state.searchResult.car.img} />\r\n\r\n                <div className=\"btn-container\">\r\n                    <a className=\"btn btn-info\" id=\"car_wiki\" target=\"_blank\"\r\n                        href={WIKIPEDIA_URL + this.data.sets[exact.set].wiki}>View more on Wikipedia</a>\r\n                    <a className=\"btn btn-info\" id=\"car_tfnsw\" target=\"_blank\"\r\n                        href={TFNSW_ARTICLE_URL + this.data.sets[exact.set].tfnsw + this.state.searchResult.car.href}>\r\n                        View more on Sydney Trains</a>\r\n                </div>\r\n            </div>\r\n            )}\r\n        </div>);\r\n    }\r\n}\r\n\r\nclass Form extends Component<{\r\n    value: any, \r\n    onSubmit: FormEventHandler, \r\n    onChangeInput: ChangeEventHandler\r\n}, {}> {\r\n    render() {\r\n        return (\r\n        <form className=\"mb-4\" onSubmit={this.props.onSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"carId\">Car Number: </label>\r\n                <input className=\"form-control\" id=\"carId\" type=\"text\" \r\n                    value={this.props.value} onChange={this.props.onChangeInput} required />\r\n            </div>\r\n            <input className=\"btn btn-primary\" type=\"submit\" value=\"Search\" />\r\n        </form>);\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether a given car number is within the given range.\r\n */\r\nfunction checkIdInRange(id: number, range: Range) {\r\n    return (id >= range.start && id <= range.end);\r\n}\r\n\r\n//From https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\r\nfunction getParameterByName(name, url) {\r\n    if (!url) url = window.location.href;\r\n    name = name.replace(/[[\\]]/g, \"\\\\$&\");\r\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\r\n        results = regex.exec(url);\r\n    if (!results) return null;\r\n    if (!results[2]) return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/main.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}